module Main.BusinessObjects.Entity where

--- File Imports
import Main.BusinessObjects.Commodities

--- Functional Imports
import Main.DataTypes.Utils
import DA.Optional
import DA.Next.Map as M
import DA.List as L

type EntityKey = (Text, Party, Party)

template Entity
	with
		entity: Party
		details: Text
		role: Text
		roleDetails: Map Text Roles
		relationship: Text
		commodityName: Text
		manager: Party
	
	where
		ensure role /= ""
		signatory manager
		observer entity, manager
		key (role, manager, entity) : EntityKey
		maintainer key._2

		nonconsuming choice CreateCommodity: Either  Text (ContractId Commodities)
			with
				_commodity: Text
				_details: Text
				_quantity: Decimal
				_cost: Decimal
				_owner: Party

			controller _owner 
				do 	
					debug "Creating Commodity."
					existingCommodityCid <- lookupByKey @Commodities (_commodity, _owner)
					if(isSome existingCommodityCid)
					then do
						return (Left "Commodity already exists.")
					else
						do
							debug "Creating Commodity."
							let roleData = fromSome (M.lookup role roleDetails)
							debug (roleData)
							debug "Creating Commodity."
							let roleData = (M.lookup this.role this.roleDetails)
							-- when u r trying to access map values datatype we need to convert from optional to normal value by using fromSome,it is applicable how deep the map goes
							-- meaning if canbuy itself Map once again u need to convert using fromsome then try accessing values
							let canRequestNewLot = (fromSome(roleData)).canRequestNewLot

							if (canRequestNewLot)
							then do
									entityId <- create Commodities with commodity = _commodity,
																			details = _details,
																			quantity = _quantity,
																			cost = _cost,
																			owner = _owner
									return (Right entityId)
							else
								do
									return (Left "You are not entitled to create commodity.")
				  

